// This file was generated by counterfeiter
package commandsfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/commands"
)

type FakeLoginClient struct {
	LoginStub        func(name string, apiToken string) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		name     string
		apiToken string
	}
	loginReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoginClient) Login(name string, apiToken string) error {
	fake.loginMutex.Lock()
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		name     string
		apiToken string
	}{name, apiToken})
	fake.recordInvocation("Login", []interface{}{name, apiToken})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(name, apiToken)
	} else {
		return fake.loginReturns.result1
	}
}

func (fake *FakeLoginClient) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeLoginClient) LoginArgsForCall(i int) (string, string) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].name, fake.loginArgsForCall[i].apiToken
}

func (fake *FakeLoginClient) LoginReturns(result1 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLoginClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLoginClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.LoginClient = new(FakeLoginClient)
