// This file was generated by counterfeiter
package productfakes

import (
	"sync"

	go_pivnet "github.com/pivotal-cf/go-pivnet"
	"github.com/pivotal-cf/go-pivnet/cmd/pivnet/commands/product"
)

type FakePivnetClient struct {
	ProductsStub        func() ([]go_pivnet.Product, error)
	productsMutex       sync.RWMutex
	productsArgsForCall []struct{}
	productsReturns     struct {
		result1 []go_pivnet.Product
		result2 error
	}
	FindProductForSlugStub        func(productSlug string) (go_pivnet.Product, error)
	findProductForSlugMutex       sync.RWMutex
	findProductForSlugArgsForCall []struct {
		productSlug string
	}
	findProductForSlugReturns struct {
		result1 go_pivnet.Product
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) Products() ([]go_pivnet.Product, error) {
	fake.productsMutex.Lock()
	fake.productsArgsForCall = append(fake.productsArgsForCall, struct{}{})
	fake.recordInvocation("Products", []interface{}{})
	fake.productsMutex.Unlock()
	if fake.ProductsStub != nil {
		return fake.ProductsStub()
	} else {
		return fake.productsReturns.result1, fake.productsReturns.result2
	}
}

func (fake *FakePivnetClient) ProductsCallCount() int {
	fake.productsMutex.RLock()
	defer fake.productsMutex.RUnlock()
	return len(fake.productsArgsForCall)
}

func (fake *FakePivnetClient) ProductsReturns(result1 []go_pivnet.Product, result2 error) {
	fake.ProductsStub = nil
	fake.productsReturns = struct {
		result1 []go_pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) FindProductForSlug(productSlug string) (go_pivnet.Product, error) {
	fake.findProductForSlugMutex.Lock()
	fake.findProductForSlugArgsForCall = append(fake.findProductForSlugArgsForCall, struct {
		productSlug string
	}{productSlug})
	fake.recordInvocation("FindProductForSlug", []interface{}{productSlug})
	fake.findProductForSlugMutex.Unlock()
	if fake.FindProductForSlugStub != nil {
		return fake.FindProductForSlugStub(productSlug)
	} else {
		return fake.findProductForSlugReturns.result1, fake.findProductForSlugReturns.result2
	}
}

func (fake *FakePivnetClient) FindProductForSlugCallCount() int {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return len(fake.findProductForSlugArgsForCall)
}

func (fake *FakePivnetClient) FindProductForSlugArgsForCall(i int) string {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return fake.findProductForSlugArgsForCall[i].productSlug
}

func (fake *FakePivnetClient) FindProductForSlugReturns(result1 go_pivnet.Product, result2 error) {
	fake.FindProductForSlugStub = nil
	fake.findProductForSlugReturns = struct {
		result1 go_pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.productsMutex.RLock()
	defer fake.productsMutex.RUnlock()
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ product.PivnetClient = new(FakePivnetClient)
