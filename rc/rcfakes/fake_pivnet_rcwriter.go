// This file was generated by counterfeiter
package rcfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/rc"
)

type FakePivnetRCWriter struct {
	WriteToFileStub        func(configFileLocation string, contents interface{}) error
	writeToFileMutex       sync.RWMutex
	writeToFileArgsForCall []struct {
		configFileLocation string
		contents           interface{}
	}
	writeToFileReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetRCWriter) WriteToFile(configFileLocation string, contents interface{}) error {
	fake.writeToFileMutex.Lock()
	fake.writeToFileArgsForCall = append(fake.writeToFileArgsForCall, struct {
		configFileLocation string
		contents           interface{}
	}{configFileLocation, contents})
	fake.recordInvocation("WriteToFile", []interface{}{configFileLocation, contents})
	fake.writeToFileMutex.Unlock()
	if fake.WriteToFileStub != nil {
		return fake.WriteToFileStub(configFileLocation, contents)
	} else {
		return fake.writeToFileReturns.result1
	}
}

func (fake *FakePivnetRCWriter) WriteToFileCallCount() int {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return len(fake.writeToFileArgsForCall)
}

func (fake *FakePivnetRCWriter) WriteToFileArgsForCall(i int) (string, interface{}) {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return fake.writeToFileArgsForCall[i].configFileLocation, fake.writeToFileArgsForCall[i].contents
}

func (fake *FakePivnetRCWriter) WriteToFileReturns(result1 error) {
	fake.WriteToFileStub = nil
	fake.writeToFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetRCWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePivnetRCWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rc.PivnetRCWriter = new(FakePivnetRCWriter)
