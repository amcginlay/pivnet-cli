// This file was generated by counterfeiter
package authfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/auth"
)

type FakeAuthClient struct {
	AuthStub        func() (bool, error)
	authMutex       sync.RWMutex
	authArgsForCall []struct{}
	authReturns     struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthClient) Auth() (bool, error) {
	fake.authMutex.Lock()
	fake.authArgsForCall = append(fake.authArgsForCall, struct{}{})
	fake.recordInvocation("Auth", []interface{}{})
	fake.authMutex.Unlock()
	if fake.AuthStub != nil {
		return fake.AuthStub()
	} else {
		return fake.authReturns.result1, fake.authReturns.result2
	}
}

func (fake *FakeAuthClient) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *FakeAuthClient) AuthReturns(result1 bool, result2 error) {
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAuthClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.AuthClient = new(FakeAuthClient)
